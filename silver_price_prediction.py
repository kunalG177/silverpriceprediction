# -*- coding: utf-8 -*-
"""Silver-price-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V3xbiy0nVEo9_XV4UDuQGNHkQXXH2V2I
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#data collection and processing
dataset = pd.read_csv("/content/silver_price_data.csv")

# first five rows in the DataFrame
dataset.head()

# last five rows in the DataFrame
dataset.tail()

#finding a shape of the dataset
dataset.shape

#getting some  basic info about the data
dataset.info()

#checking the missing value in the dataset
dataset.isnull().sum()

# getting the satistical measures of the dataset
dataset.describe()

# getting the correlation between the columns 
correlation = dataset.corr()

# constructing the heatmap to understand the correlation 
plt.figure(figsize=(8,8))
sns.heatmap(correlation, cbar = True , square = True ,fmt = '.1f', annot = True , annot_kws ={'size':8}, cmap='Blues')

# correlatioin values of SLV
print(correlation['SLV'])

# checking the distribution of the SLV Price
sns.distplot(dataset['SLV'], color = 'blue')

#splitting the features and target
X = dataset.drop(['Date','SLV'],axis =1)
y = dataset['SLV']

print(X)

print(y)

#splitting trainig and test data
from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X,y, test_size = 0.2 ,random_state = 42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

# model training : Random Forest Regressor
from sklearn.ensemble import RandomForestRegressor

regressor = RandomForestRegressor(n_estimators=100)

regressor.fit(X_train , y_train)

#model evaluation 
# prediction 
test_prediction = regressor.predict(X_test)
print(test_prediction)

# getting r2_score 
from sklearn import metrics

error_score = metrics.r2_score(y_test , test_prediction)
print("R squared error :" , error_score)

#compare the actual values and predicted value in plot
y_test = list(y_test)



plt.plot(y_test, color='blue', label = 'Actual Value')
plt.plot(test_prediction, color='green', label='Predicted Value')
plt.title('Actual Price vs Predicted Price')
plt.xlabel('Number of values')
plt.ylabel('SLV Price')
plt.legend()
plt.show()

